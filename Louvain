import pandas as pd
import numpy as np
import networkx as nx
from sklearn.metrics.pairwise import cosine_similarity, polynomial_kernel
from scipy.sparse import csr_matrix
import matplotlib.pyplot as plt
from netgraph import Graph
# Load datasets
anime_data = pd.read_csv('Anime.csv')
rating_data = pd.read_csv('Rating.csv')
community_to_color= [
    "#FF0000",  # Red
    "#00FF00",  # Green
    "#0000FF",  # Blue
    "#FFFF00",  # Yellow
    "#00FFFF",  # Cyan
    "#FF00FF",  # Magenta
    "#FFA500",  # Orange
    "#800080",  # Purple
    "#00FF00",  # Lime
    "#008080",  # Teal
    "#FFC0CB",  # Pink
    "#C0C0C0",  # Silver
    "#A52A2A",  # Brown
    "#800000",  # Maroon
    "#808000",  # Olive
    "#000080",  # Navy
    "#4B0082",  # Indigo
    "#7FFFD4",  # Aquamarine
    "#40E0D0",  # Turquoise
    "#FFD700"   # Gold
]


# Merge datasets on 'anime_id'
merged_data = pd.merge(rating_data, anime_data, on='anime_id')

# Filter data for the first 100 users
first_100_users_data = merged_data[merged_data['user_id'] <= 300]
# Create user-item matrix
user_item_matrix = first_100_users_data.pivot(index='user_id', columns='name', values='rating_x').fillna(-1)
# Convert user-item matrix to sparse matrix
user_item_sparse = csr_matrix(user_item_matrix.values)

# Calculate user similarity (using cosine similarity = A.B/||A||*||B|| for two vectors
#user_similarity = cosine_similarity(user_item_sparse, dense_output=False)
def similarity(user_item_sparse):
    """Takes a sparse csr matrix of the ratings of each anime for each user,
    -1 if not watched. Computes the similarity between each pair of users
    by using cosine similarity on the ratings only."""

    # Replace -1 entries with 0
    user_item_sparse_zero = user_item_sparse.copy()
    user_item_sparse_zero.data[user_item_sparse_zero.data == -1] = 0

    # Compute cosine similarity between users
    user_similarity = cosine_similarity(user_item_sparse_zero, dense_output=False)

    return user_similarity
user_similarity=similarity(user_item_sparse)

# Build user graph
G = nx.Graph()
num_users = user_item_matrix.shape[0]
for i in range(num_users):
    for j in range(i + 1, num_users):
        similarity = user_similarity[i, j]
        if similarity > 0:  # Only add edges for users with positive similarity
            G.add_edge(i, j, weight=similarity)

# Perform community detection
#communities = nx.algorithms.community.greedy_modularity_communities(G) #greedy way
communities = nx.community.louvain_communities(G, resolution=1.009)#louvain algorithm 

# Print number of communities and their sizes
print("Number of communities:", len(communities))
for i, community in enumerate(communities):
    print("Community", i+1, "size:", len(community))

# Optional: Visualization of the graph and communities doesn't work yet)
visu=False
if visu:
    node_to_community = []
    for i in G.nodes():
        for idx, s in enumerate(communities):
            if i in s:
                node_to_community.append((i, idx))



    node_color = {node: community_to_color[community_id] for node, community_id in node_to_community}

    Graph(G,
      node_color=node_color, node_edge_width=0, edge_alpha=0.1,
      node_layout='communities', node_layout_kwargs=dict(node_to_community=node_to_community),
      edge_layout='bundled', edge_layout_kwargs=dict(k=2000),
    )

    plt.show()


def recommendation(user,  user_item_matrix, communities=communities):
    """Returns a recommended anime for a given user"""
    # Find the community to which the user belongs
    user_community = []
    for community in communities:
        if user in community:
            user_community = list(community)
            break
    
    # Filter user-item matrix for users in the given community
    community_user_item_matrix = user_item_matrix[user_item_matrix.index.isin(user_community)]

    
    # Calculate mean rating for each anime within the community
    #community_ratings = community_user_item_matrix.mean(axis=0)
    community_ratings = community_user_item_matrix.replace(-1, 0).mean(axis=0)
    # Sort the anime by average ratings
    sorted_anime = community_ratings.sort_values(ascending=False)

    if len(sorted_anime) == 0:
        return "User watched everything"

    # Return the top recommended anime
    return sorted_anime.index[0]




def test(user_id):  
    
    threshold = 7  # Example rating threshold for liked anime 
    # Retrieve liked animes
    watched_anime = user_item_matrix.loc[user_id]
    liked_anime = watched_anime[watched_anime >= threshold].index.tolist()

    # Step 3: Remove the selected animes from the watched animes
    user_item_matrix.loc[user_id, liked_anime] = -1

    # Step 4: Generate recommendations for the user
    recommended_anime = recommendation(user_id, user_item_matrix=user_item_matrix)
    
    # Step 5: Evaluate the recommendations against the anime the user has watched and liked
    if recommended_anime in liked_anime:
        return True, recommended_anime

    else:
        return False, recommended_anime

for i in range(1, 300):
    print(i, test(i))
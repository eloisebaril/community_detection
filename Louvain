import pandas as pd
import numpy as np
import networkx as nx
from sklearn.metrics.pairwise import cosine_similarity
from scipy.sparse import csr_matrix
# Load datasets
anime_data = pd.read_csv('Anime.csv')
rating_data = pd.read_csv('Rating.csv')

# Merge datasets on 'anime_id'
merged_data = pd.merge(rating_data, anime_data, on='anime_id')

# Filter data for the first 100 users
first_100_users_data = merged_data[merged_data['user_id'] <= 100]
# Create user-item matrix
user_item_matrix = first_100_users_data.pivot(index='user_id', columns='name', values='rating_x').fillna(-1)
# Convert user-item matrix to sparse matrix
user_item_sparse = csr_matrix(user_item_matrix.values)

# Calculate user similarity (using cosine similarity = cos(theta) = A.B/||A||*||B|| for two vectors
user_similarity = cosine_similarity(user_item_sparse, dense_output=False)

# Build user graph
G = nx.Graph()
num_users = user_item_matrix.shape[0]
for i in range(num_users):
    for j in range(i + 1, num_users):
        similarity = user_similarity[i, j]
        if similarity > 0:  # Only add edges for users with positive similarity
            G.add_edge(i, j, weight=similarity)

# Perform community detection
#communities = nx.algorithms.community.greedy_modularity_communities(G) #greedy way
communities = nx.community.louvain_communities(G, resolution=1.2)#louvain

# Print number of communities and their sizes
print("Number of communities:", len(communities))
for i, community in enumerate(communities):
    print("Community", i+1, "size:", len(community))

# Optional: Visualization of the graph and communities
import matplotlib.pyplot as plt

pos = nx.spring_layout(G)
plt.figure(figsize=(10, 8))
nx.draw_networkx_nodes(G, pos, node_size=20)
nx.draw_networkx_edges(G, pos, alpha=0.4)
plt.title("User Graph with Detected Communities")
plt.show()

def recommandation(user):
    """returns a recommended anime for a given user"""
    # Find the community to which the user belongs
    for community in communities:
        if user in community:
            user_community = community
            break

    # Calculate average ratings for each anime in the user's community
    community_ratings = user_item_matrix.loc[user_community].mean()

    # Sort the anime by average ratings
    sorted_anime = community_ratings.sort_values(ascending=False)

    # Get the top-rated anime that the user hasn't watched yet
    watched_anime = user_item_matrix.loc[user]
    recommended_anime = sorted_anime.index[watched_anime == -1]

    if len(recommended_anime) == 0:
        return "User watched everything"

    # Return the top recommended anime
    return recommended_anime[0]

user_id = 10
recommended_anime=recommandation(user_id)
print("Recommended anime for user", user_id, ":", recommended_anime)